diff --git a/xep/jaxl.0030.php b/xep/jaxl.0030.php
index ce29e26..09e95ce 100644
--- a/xep/jaxl.0030.php
+++ b/xep/jaxl.0030.php
@@ -41,38 +41,38 @@
     */
     class JAXL0030 {
     
-        public static $ns = array('info'=>'http://jabber.org/protocol/disco#info', 'item'=>'http://jabber.org/protocol/disco#item');
+        public static $ns = array('info'=>'http://jabber.org/protocol/disco#info', 'items'=>'http://jabber.org/protocol/disco#items');
         public static $category = false;
         public static $type = false;
         public static $name = false;
         public static $lang = false;
-        
+
         public static function init($jaxl, $config=array()) {
             $jaxl->features[] = self::$ns['info'];
-            $jaxl->features[] = self::$ns['item'];
-            
+            $jaxl->features[] = self::$ns['items'];
+
             self::$category = isset($config['category']) ? $config['category'] : 'client';
             self::$type = isset($config['type']) ? $config['type'] : 'bot';
             self::$name = isset($config['name']) ? $config['name'] : 'Jaxl';
             self::$lang = isset($config['lang']) ? $config['lang'] : 'en';
-            
+
             // register callbacks
             JAXLPlugin::add('jaxl_get_iq_get', array('JAXL0030', 'handleIq'));
         }
-        
+
         public static function discoInfo($jaxl, $to, $from, $callback, $node=false) {
             $payload = '<query xmlns="'.self::$ns['info'].'"';
             if($node) $payload .= ' node="'.$node.'"/>';
             else $payload .= '/>';
-            
+
             return XMPPSend::iq($jaxl, 'get', $payload, $to, $from, $callback);
         }
-        
-        public static function discoItem($jaxl, $to, $from, $callback, $node=false) {
-            $payload = '<query xmlns="'.self::$ns['item'].'"';
+
+        public static function discoItems($jaxl, $to, $from, $callback, $node=false) {
+            $payload = '<query xmlns="'.self::$ns['items'].'"';
             if($node) $payload .= ' node="'.$node.'"/>';
             else $payload .= '/>';
-            
+
             return XMPPSend::iq($jaxl, 'get', $payload, $to, $from, $callback);
         }
 
@@ -94,7 +94,7 @@
                 
                 XMPPSend::iq($jaxl, 'result', $xml, $payload['from'], $payload['to'], false, $payload['id']);
             }
-            else if($xmlns == self::$ns['item']) {
+            else if($xmlns == self::$ns['items']) {
                 
             }
             
diff --git a/xep/jaxl.0060.php b/xep/jaxl.0060.php
index cc78203..c226b1b 100644
--- a/xep/jaxl.0060.php
+++ b/xep/jaxl.0060.php
@@ -64,21 +64,21 @@
         }
 
         public static function discoNodes() {
-            
+
         }
 
         public static function discoNodeInfo() {
 
         }
-        
+
         public static function discoNodeMeta($jaxl, $to, $from, $node, $callback) {
             $payload = '<query xmlns="'.JAXL0030::$ns['info'].'" node="'.$node.'"/>';
             return XMPPSend::iq($jaxl, 'get', $payload, $to, $from, $callback);
         }
 
-        public static function discoNodeItem($jaxl, $to, $from, $node, $callback) {
-            $payload = '<query xmlns="'.JAXL0030::$ns['item'].'" node="'.$node.'"/>';
-            return XMPPSend::iq($jaxl, 'get', $payload, $to, $from, $callback);
+        //note: node can be a null string
+        public static function discoNodeItems($jaxl, $to, $from, $callback, $node=false) {
+            return JAXL0030::discoItems($jaxl, $to, $from, $callback, $node);
         }
 
         public static function getNodeSubscriptions($jaxl, $to, $from, $callback) {
@@ -88,7 +88,7 @@
             $payload .= '</pubsub>';
             return XMPPSend::iq($jaxl, 'get', $payload, $to, $from, $callback);
         }
-        
+
         public static function getNodeAffiliations($jaxl, $to, $from, $callback) {
             $payload = '';
             $payload .= '<pubsub xmlns="'.self::$ns.'">';
@@ -96,7 +96,7 @@
             $payload .= '</pubsub>';
             return XMPPSend::iq($jaxl, 'get', $payload, $to, $from, $callback); 
         }
-        
+
         /*
          * Subscriber Use Cases
         */
